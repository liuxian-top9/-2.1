#include <iostream>
#include <fstream>
#include <vector>
#include <chrono>
#include <thread>
#include <ctime>
using namespace std;

class ELEVATOR {
private:
    int now_floor_e;
    int now_floor_p;
    int want_floor;

    bool choice;             //上下行
    std::vector<int> floor_history; // 记录经过的楼层

public:
    int all_floor;
    ELEVATOR() {
        now_floor_e = 1;   //表示电梯当前所在的楼层
        now_floor_p = 1;   //表示乘客在电梯内的当前楼层
        want_floor = 1;    //表示乘客想要去的楼层
        all_floor = 10;
        choice = true;
    }

    int start() {
        displayDate();                                //首先显示当前日期和时间

        bool continueFlag = true;
        while (continueFlag) {
            ask();
            arriave_now_floor_p();
            get_choice();
            get_floor();
            arriave_want_floor();

            cout << "是否继续进行？(输入3退出,否则继续)：";   //非3即为继续
            int choice;
            cin >> choice;
            if (choice == 3) {
                continueFlag = false;
            }
        }

        saveFloorHistory();

        return 0;
    }

    void ask() {
        cout << "目前最高层为" << all_floor << "层，欢迎使用！！" << endl;
        cout << "请输入您当前所在的楼层：";
        cin >> now_floor_p;
    }

    void arriave_now_floor_p() {
        cout << "电梯从 " << now_floor_e << " 层到达 " << now_floor_p << " 层" << endl;
        now_floor_e = now_floor_p;
    }

    bool get_choice() {
        cout << "请选择上行(1)或下行(0)：";
        cin >> choice;
        return choice;
    }

    void get_floor() {
        cout << "请输入您要前往的楼层：";
        cin >> want_floor;

        while (judge() == -1) {
            cout << "输入不合法！请重新输入：" << endl;
            cin >> want_floor;
        }
    }

    int judge() {
        if (choice && want_floor < now_floor_e) {
            cout << "不合法！目标楼层不能比当前楼层小。" << endl;
            return -1;
        }
        else if (!choice && want_floor > now_floor_e) {
            cout << "不合法！目标楼层不能比当前楼层大。" << endl;
            return -1;
        }

        return 0;
    }

    void arriave_want_floor() {
        cout << "电梯开始运行..." << endl;

        if (choice) {
            for (int floor = now_floor_e; floor <= want_floor; floor++) {
                now_floor_e = floor;
                displayFloor();
                this_thread::sleep_for(chrono::milliseconds(500));
                floor_history.push_back(floor);
            }
        }
        else {
            for (int floor = now_floor_e; floor >= want_floor; floor--) {
                now_floor_e = floor;
                displayFloor();
                this_thread::sleep_for(chrono::milliseconds(500));
                floor_history.push_back(floor);
            }
        }

        cout << "电梯到达目标楼层：" << now_floor_e << " 层" << endl;
    }

    void displayFloor() {
        cout << "电梯经过 " << now_floor_e << " 层" << endl;
    }

    void displayDate() {
        time_t now = time(0);
        tm localTime;
        localtime_s(&localTime, &now);
        char buffer[80];
        strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &localTime);
        cout << "当前日期和时间：" << buffer << endl;
    }
    void saveFloorHistory() {
        std::ofstream file("floor_history.txt");
        if (file.is_open()) {
            time_t now = time(0);
            tm localTime;
            localtime_s(&localTime, &now);
            char buffer[80];
            strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &localTime);

            file << "[" << buffer << "] (起始时间)\n";

            for (int floor : floor_history) {
                file << floor << "\n";
            }

            file.close();
            cout << "楼层历史记录已保存到文件。" << endl;
        }
        else {
            cout << "无法打开文件来保存楼层历史记录。" << endl;
        }
    }
};


class ExpressElevator : public ELEVATOR {
public:
    ExpressElevator() {
        all_floor = 20; // 设置更高的最高层数
    }

};

int main() {
    ELEVATOR elevator;
    elevator.start();

    ExpressElevator expressElevator;
    expressElevator.start();

    return 0;

}
